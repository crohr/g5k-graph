#!/usr/bin/env ruby

require 'optparse'
@options = {
  :from => Time.now.to_i-600,
  :resolution => 15,
  :metrics => ['mem_free', 'cpu_idle', 'bytes_in', 'bytes_out'],
  :to => (Time.now.to_i/15*15),
  :output => File.expand_path("./data")
}
option_parser = OptionParser.new do |opts|
  opts.banner = <<BANNER
* Description
  g5k-graph - Graph your Grid'5000 metrics.
* Usage
  g5k-graph [options] < list-of-nodes
* Options
BANNER

  opts.on("-f=", "--from=", "The timeseries start time, in seconds since EPOCH [default=#{@options[:from]}]") do |v|
    @options[:from] = v.to_i
  end
  opts.on("-t=", "--to=", "The timeseries end time, in seconds since EPOCH [default=#{@options[:to]}]") do |v|
    @options[:to] = v.to_i
  end
  opts.on("-r=", "--resolution=", "The timeseries resolution, in seconds [default=#{@options[:resolution]}]") do |v|
    @options[:resolution] = v.to_i
  end
  opts.on("-m=", "--metrics=", "The comma-separated list of metrics to fetch [default=#{@options[:metrics].join(",")}]") do |v|
    @options[:metrics] = v.split(",")
  end
  opts.on("-o=", "--output=", "Where to write the timeseries data and graphs [default=#{@options[:output]}]") do |v|
    @options[:output] = File.expand_path(v)
  end
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
  
end

option_parser.parse!

check_environment!

nodes = []
while node = gets() do
  nodes.push(node.chomp) unless node.strip.empty?
end

abort "No nodes given" if nodes.empty?

if nodes.all?{|n| n =~ /\.\w+\.grid5000\.fr$/}
  fetch_timeseries(nodes, @options)
  graph_timeseries(nodes, @options)
  exit 0
else
  abort "One of the given nodes is not correct: #{nodes.inspect}"
end


# TODO: make a lib of those functions
def check_environment!
  `which rrdtool`
  abort "It looks like you do not have the `rrdtool` binary in your path. Please try to install it first." if $?.exitstatus != 0
  `which unzip`
  abort "It looks like you do not have the `unzip` binary in your path. Please try to install it first." if $?.exitstatus != 0
end

def fetch_timeseries(nodes, options = {})
  nodes_by_site = nodes.group_by{|n|
    n.split(".")[1]
  }
  nodes_by_site.keys.each do |site|
    cmd = "curl -kn \"https://api.grid5000.fr/2.0/grid5000"+
    "/sites/#{site}/metrics/{#{options[:metrics].join(",")}}/timeseries.zip"+
    "?only=#{nodes_by_site[site].join(",")}"+
    "&from=#{options[:from]}"+
    "&to=#{options[:to]}"+
    "&resolution=#{options[:resolution]}\""+
    " -o \"#{File.join(options[:output], "#{site}-#1-timeseries.zip")}\""
    puts cmd
    system cmd
  end
end

def graph_timeseries(nodes, options = {})
  Dir.chdir(options[:output]) do |dir|
    Dir["*.zip"].each do |zip|
     system "unzip #{zip}"
    end
    commands = {}
    Dir["*.grid5000.fr/*.xml"].each do |xml|
     dirname = File.dirname(xml)
     metric = File.basename(xml, ".xml")
     node = File.basename(dirname).split(".").first
     commands[metric] ||= "rrdtool graph #{metric}.png --title #{metric} -s #{options[:from]}"
     puts "Restoring #{metric}..."
     rrd = "#{File.join(dirname, metric)}.rrd"
     File.unlink rrd if File.exist?(rrd)
     system "rrdtool restore #{xml} #{rrd}"
     # generate random color
     color = "%06x" % (rand * 0xffffff)
     commands[metric] += " DEF:#{node}=#{rrd}:sum:AVERAGE LINE2:#{node}##{color}:#{node}"
    end
    commands.each do |metric, cmd| 
     puts "Executing #{cmd}"
     system cmd
    end
    puts "The following graphs have been generated in #{dir.inspect}:"
    puts Dir["*.png"].join("\n")
  end
end